{"functions":[{"name":"parseDate","body":"(dateStr) => {\n  let dateArray = dateStr.split(\"-\")\n  {\n    year: dateArray[0].parseInt(),\n    month: dateArray[1].parseInt()\n  }\n  \n}","role":null},{"name":"intersection","body":"(setsArray) => {\n  setsArray.filter(set => set != null).map((set) => set!.toArray()).reduce((a, b) => a.filter((c) => b.includes(c)))\n}","role":null},{"name":"upsertPrivilege","body":"(roleName, privilege) => {\n  let role = Role.byName(roleName)\n  let updatedPrivileges = role!.privileges.append(privilege)\n  role!.update({\n    privileges: updatedPrivileges\n  }\n  )\n}","role":null},{"name":"getDbb004BankingSummary","body":"(permitNumber, year) => {\n  let modifiedBanking = administrativeReports.where(.permitNumber == permitNumber && .year == year).first()\n  let allowedAppropriation = {\n    if (modifiedBanking != null) {\n      {\n        value: modifiedBanking!.allowedAppropriation?.value\n      }\n      \n    } else {\n      null\n    }\n  }\n  let pumpingLimitThisYear = {\n    if (modifiedBanking != null && modifiedBanking!.pumpingLimitThisYear != null) {\n      {\n        value: modifiedBanking!.pumpingLimitThisYear?.value\n      }\n      \n    } else {\n      null\n    }\n  }\n  let flowMeterLimit = {\n    let lastMeterReadingPrevYear = meterReadings.where((meterReading) => {\n      let recordYear = parseDate(meterReading.date).year\n      meterReading.permitNumber == permitNumber && recordYear == (year.parseInt() - 1)\n    }).order(desc((doc) => parseDate(doc.date).month)).order(desc((doc) => parseDate(doc.date).year)).first()\n    let lastFlowMeterPrevYear = {\n      if (lastMeterReadingPrevYear != null) {\n        lastMeterReadingPrevYear!.flowMeter?.value\n      } else {\n        null\n      }\n    }\n    if (pumpingLimitThisYear != null && lastFlowMeterPrevYear != null) {\n      let pumpingLimit = pumpingLimitThisYear?.value\n      let flowMeter = lastFlowMeterPrevYear\n      let sum = Math.sum([pumpingLimit, flowMeter])\n      {\n        value: Math.round(sum, 2)\n      }\n      \n    } else {\n      null\n    }\n  }\n  {\n    permitNumber: permitNumber,\n    year: year,\n    bankingData: [{\n      name: \"allowedAppropriation\",\n      value: allowedAppropriation\n    }\n    , {\n      name: \"pumpingLimitThisYear\",\n      value: pumpingLimitThisYear\n    }\n    , {\n      name: \"flowMeterLimit\",\n      value: flowMeterLimit\n    }\n    ]\n  }\n  \n}","role":null},{"name":"upsertCollection","body":"(collection) => {\n  let coll = Collection.byName(collection!.name)\n  if (coll.exists()) {\n    coll!.update(collection)\n  } else {\n    Collection.create(collection)\n  }\n}","role":null},{"name":"upsertFunction","body":"(function) => {\n  let fn = Function.byName(function!.name)\n  if (fn.exists()) {\n    fn!.update(function)\n  } else {\n    Function.create(function)\n  }\n}","role":null},{"name":"upsertRole","body":"(role) => {\n  let r = Role.byName(role!.name)\n  if (r.exists()) {\n    r!.update(role)\n  } else {\n    Role.create(role)\n  }\n}","role":null},{"name":"upsertCollections","body":"(collections) => {\n  collections!.map((collection) => upsertCollection(collection))\n}","role":null},{"name":"upsertFunctions","body":"(fns) => {\n  fns.map((fn) => upsertFunction(fn))\n}","role":null},{"name":"upsertRoles","body":"(roles) => {\n    roles.map(role => upsertRole(role))\n  }","role":null},{"name":"test","body":"\n  (input) => input + 1  \n  ","role":null}],"collections":[{"name":"meterReadings","history_days":30,"indexes":null,"constraints":null,"data":{"permitNumber":"XX-00006","date":"2022-02"}},{"name":"administrativeReports","history_days":30,"indexes":null,"constraints":null,"data":null},{"name":"wellPermits","history_days":30,"indexes":null,"constraints":null,"data":null},{"name":"users","history_days":30,"indexes":null,"constraints":null,"data":null},{"name":"wellPermitRecords","history_days":30,"indexes":{},"constraints":[],"data":null},{"name":"agentInfo","history_days":30,"indexes":{},"constraints":[],"data":null},{"name":"wellUsage","history_days":30,"indexes":null,"constraints":null,"data":null},{"name":"modifiedBankingSummary","history_days":0,"indexes":{},"constraints":[],"data":null}],"roles":[{"name":"read-write-all-collections","membershp":null,"privileges":[{"resource":{"coll":{"name":"Collection"},"name":"meterReadings","ts":{"isoString":"2022-12-04T13:38:07.750Z"},"data":{"permitNumber":"XX-00006","date":"2022-02"},"history_days":30},"actions":{"read":true,"write":true,"create":true,"delete":true,"history_read":true,"history_write":false,"unrestricted_read":false}},{"resource":{"coll":{"name":"Collection"},"name":"administrativeReports","ts":{"isoString":"2022-12-04T13:38:07.750Z"},"data":{},"history_days":30},"actions":{"read":true,"write":true,"create":true,"delete":true,"history_read":true,"history_write":false,"unrestricted_read":false}},{"resource":{"coll":{"name":"Collection"},"name":"wellPermits","ts":{"isoString":"2022-12-04T13:38:07.750Z"},"data":{},"history_days":30},"actions":{"read":true,"write":true,"create":true,"delete":true,"history_read":true,"history_write":false,"unrestricted_read":false}},{"resource":"[legacy index meter-readings-by-permit-number]","actions":{"unrestricted_read":false,"read":true}},{"resource":"[legacy index meter-readings-by-date]","actions":{"unrestricted_read":false,"read":true}},{"resource":"[legacy index meter-readings-by-permitnumber-date]","actions":{"unrestricted_read":false,"read":true}},{"resource":"[legacy index meter-readings-by-year]","actions":{"unrestricted_read":false,"read":true}},{"resource":"[legacy index meter-readings-sort-by-date-asc]","actions":{"unrestricted_read":false,"read":true}},{"resource":"[legacy index admin-reports-by-permitnumber]","actions":{"unrestricted_read":false,"read":true}},{"resource":"[legacy index admin-reports-by-year]","actions":{"unrestricted_read":false,"read":true}},{"resource":"[legacy index admin-reports-by-permitnumber-year]","actions":{"unrestricted_read":false,"read":true}},{"resource":{"ref":{"coll":{"name":"Function"},"name":"SplitDate"},"cause":"not found"},"actions":{"call":true}},{"resource":"[legacy index meter-readings-by-permitNumber-year]","actions":{"unrestricted_read":false,"read":true}},{"resource":"[legacy index admin-reports-sort-by-year-asc]","actions":{"unrestricted_read":false,"read":true}},{"resource":{"coll":{"name":"Collection"},"name":"wellPermitRecords","ts":{"isoString":"2023-08-27T13:26:57.675Z"},"data":{},"constraints":[],"history_days":30,"indexes":{}},"actions":{"read":true,"write":true,"create":true,"delete":true,"history_read":true,"history_write":false,"unrestricted_read":false}},{"resource":"[legacy index well-permits-by-permit]","actions":{"unrestricted_read":false,"read":true}},{"resource":"[legacy index well-permit-records-by-receipt]","actions":{"unrestricted_read":false,"read":true}},{"resource":{"coll":{"name":"Collection"},"name":"agentInfo","ts":{"isoString":"2023-11-03T21:35:05.205Z"},"data":{},"indexes":{},"constraints":[],"history_days":30},"actions":{"read":true,"write":true,"create":true,"delete":true,"history_read":true,"history_write":false,"unrestricted_read":false}},{"resource":"[legacy index agent-info-by-user_id]","actions":{"unrestricted_read":false,"read":true}},{"resource":{"coll":{"name":"Collection"},"name":"wellUsage","ts":{"isoString":"2022-12-04T13:38:07.750Z"},"data":{},"history_days":30},"actions":{"read":true,"write":true,"create":true,"delete":true,"history_read":true,"history_write":false,"unrestricted_read":false}},{"resource":"[legacy index wellUsage-by-permitnumber-year]","actions":{"unrestricted_read":false,"read":true}},{"resource":"[legacy index well-permit-records-by-permit]","actions":{"unrestricted_read":false,"read":true}},{"resource":{"coll":{"name":"Function"},"name":"intersection","ts":{"isoString":"2023-11-08T09:44:08.380Z"},"data":{},"body":"(setsArray) => {\n  setsArray.filter(set => set != null).map((set) => set!.toArray()).reduce((a, b) => a.filter((c) => b.includes(c)))\n}"},"actions":{"call":true}},{"resource":{"coll":{"name":"Function"},"name":"parseDate","ts":{"isoString":"2023-11-08T09:44:08.380Z"},"data":{},"body":"(dateStr) => {\n  let dateArray = dateStr.split(\"-\")\n  {\n    year: dateArray[0].parseInt(),\n    month: dateArray[1].parseInt()\n  }\n  \n}"},"actions":{"call":true}},{"resource":{"coll":{"name":"Collection"},"name":"modifiedBankingSummary","ts":{"isoString":"2023-10-29T08:49:40.860Z"},"data":{},"constraints":[],"indexes":{},"history_days":0},"actions":{"read":true,"write":true,"create":true,"delete":true,"history_read":true,"history_write":false,"unrestricted_read":false}},{"resource":{"coll":{"name":"Function"},"name":"getDbb004BankingSummary","ts":{"isoString":"2023-11-08T09:44:08.380Z"},"data":{},"body":"(permitNumber, year) => {\n  let modifiedBanking = administrativeReports.where(.permitNumber == permitNumber && .year == year).first()\n  let allowedAppropriation = {\n    if (modifiedBanking != null) {\n      {\n        value: modifiedBanking!.allowedAppropriation?.value\n      }\n      \n    } else {\n      null\n    }\n  }\n  let pumpingLimitThisYear = {\n    if (modifiedBanking != null && modifiedBanking!.pumpingLimitThisYear != null) {\n      {\n        value: modifiedBanking!.pumpingLimitThisYear?.value\n      }\n      \n    } else {\n      null\n    }\n  }\n  let flowMeterLimit = {\n    let lastMeterReadingPrevYear = meterReadings.where((meterReading) => {\n      let recordYear = parseDate(meterReading.date).year\n      meterReading.permitNumber == permitNumber && recordYear == (year.parseInt() - 1)\n    }).order(desc((doc) => parseDate(doc.date).month)).order(desc((doc) => parseDate(doc.date).year)).first()\n    let lastFlowMeterPrevYear = {\n      if (lastMeterReadingPrevYear != null) {\n        lastMeterReadingPrevYear!.flowMeter?.value\n      } else {\n        null\n      }\n    }\n    if (pumpingLimitThisYear != null && lastFlowMeterPrevYear != null) {\n      let pumpingLimit = pumpingLimitThisYear?.value\n      let flowMeter = lastFlowMeterPrevYear\n      let sum = Math.sum([pumpingLimit, flowMeter])\n      {\n        value: Math.round(sum, 2)\n      }\n      \n    } else {\n      null\n    }\n  }\n  {\n    permitNumber: permitNumber,\n    year: year,\n    bankingData: [{\n      name: \"allowedAppropriation\",\n      value: allowedAppropriation\n    }\n    , {\n      name: \"pumpingLimitThisYear\",\n      value: pumpingLimitThisYear\n    }\n    , {\n      name: \"flowMeterLimit\",\n      value: flowMeterLimit\n    }\n    ]\n  }\n  \n}"},"actions":{"call":true}}],"data":null},{"name":"readWriteAll","membershp":null,"privileges":[{"resource":"meterReadings","actions":{"read":true,"write":true,"create":true,"delete":true}},{"resource":"administrativeReports","actions":{"read":true,"write":true,"create":true,"delete":true}},{"resource":"wellPermits","actions":{"read":true,"write":true,"create":true,"delete":true}},{"resource":"users","actions":{"read":true,"write":true,"create":true,"delete":true}},{"resource":"wellPermitRecords","actions":{"read":true,"write":true,"create":true,"delete":true}},{"resource":"agentInfo","actions":{"read":true,"write":true,"create":true,"delete":true}},{"resource":"wellUsage","actions":{"read":true,"write":true,"create":true,"delete":true}},{"resource":"modifiedBankingSummary","actions":{"read":true,"write":true,"create":true,"delete":true}},{"resource":"upsert","actions":{"call":true}},{"resource":"SplitString","actions":{"call":true}},{"resource":"SplitDate","actions":{"call":true}},{"resource":"parseDate","actions":{"call":true}},{"resource":"intersection","actions":{"call":true}},{"resource":"upsertPrivilege","actions":{"call":true}}],"data":null}]}